// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/hellofreshdevtests/HFtest-platform-anlsergio/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

type Config_Expecter struct {
	mock *mock.Mock
}

func (_m *Config) EXPECT() *Config_Expecter {
	return &Config_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: name
func (_m *Config) Delete(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Config_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
func (_e *Config_Expecter) Delete(name interface{}) *Config_Delete_Call {
	return &Config_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *Config_Delete_Call) Run(run func(name string)) *Config_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Config_Delete_Call) Return(_a0 error) *Config_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Delete_Call) RunAndReturn(run func(string) error) *Config_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *Config) Get(name string) (domain.Config, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Config, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Config); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(domain.Config)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Config_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Config_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *Config_Expecter) Get(name interface{}) *Config_Get_Call {
	return &Config_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *Config_Get_Call) Run(run func(name string)) *Config_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Config_Get_Call) Return(_a0 domain.Config, _a1 error) *Config_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Config_Get_Call) RunAndReturn(run func(string) (domain.Config, error)) *Config_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *Config) List() ([]domain.Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Config)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Config_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Config_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *Config_Expecter) List() *Config_List_Call {
	return &Config_List_Call{Call: _e.mock.On("List")}
}

func (_c *Config_List_Call) Run(run func()) *Config_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_List_Call) Return(config []domain.Config, error1 error) *Config_List_Call {
	_c.Call.Return(config, error1)
	return _c
}

func (_c *Config_List_Call) RunAndReturn(run func() ([]domain.Config, error)) *Config_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: config
func (_m *Config) Save(config domain.Config) error {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Config_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - config domain.Config
func (_e *Config_Expecter) Save(config interface{}) *Config_Save_Call {
	return &Config_Save_Call{Call: _e.mock.On("Save", config)}
}

func (_c *Config_Save_Call) Run(run func(config domain.Config)) *Config_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Config))
	})
	return _c
}

func (_c *Config_Save_Call) Return(_a0 error) *Config_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Save_Call) RunAndReturn(run func(domain.Config) error) *Config_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: property, value
func (_m *Config) Search(property string, value string) ([]domain.Config, error) {
	ret := _m.Called(property, value)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []domain.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]domain.Config, error)); ok {
		return rf(property, value)
	}
	if rf, ok := ret.Get(0).(func(string, string) []domain.Config); ok {
		r0 = rf(property, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(property, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Config_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type Config_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - property string
//   - value string
func (_e *Config_Expecter) Search(property interface{}, value interface{}) *Config_Search_Call {
	return &Config_Search_Call{Call: _e.mock.On("Search", property, value)}
}

func (_c *Config_Search_Call) Run(run func(property string, value string)) *Config_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Config_Search_Call) Return(_a0 []domain.Config, _a1 error) *Config_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Config_Search_Call) RunAndReturn(run func(string, string) ([]domain.Config, error)) *Config_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: name, form
func (_m *Config) Update(name string, form domain.Config) error {
	ret := _m.Called(name, form)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.Config) error); ok {
		r0 = rf(name, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Config_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - name string
//   - form domain.Config
func (_e *Config_Expecter) Update(name interface{}, form interface{}) *Config_Update_Call {
	return &Config_Update_Call{Call: _e.mock.On("Update", name, form)}
}

func (_c *Config_Update_Call) Run(run func(name string, form domain.Config)) *Config_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.Config))
	})
	return _c
}

func (_c *Config_Update_Call) Return(_a0 error) *Config_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Update_Call) RunAndReturn(run func(string, domain.Config) error) *Config_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
